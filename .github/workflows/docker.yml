name: Docker

on:
  schedule:
    - cron: '0 7 * * 0'
  push:
    branches:
      - '*'
  pull_request:

env:
  IMAGE_NAME: sbt-alpine

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.latest.outputs.version }}
    steps:
      - id: latest
        name: Fetch latest version
        run: |
          LATEST=$(curl -s https://api.github.com/repos/sbt/sbt/releases/latest | jq .tag_name | sed -e 's/"//g' -e 's/^v//')
          curl -s --show-error --fail -o /dev/null -I https://github.com/sbt/sbt/releases/download/v${LATEST}/sbt-${LATEST}.tgz
          echo "Latest: $LATEST"
          echo "::set-output name=version::$(echo $LATEST)"

  build:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        alpine: [ 'alpine-slim', 'alpine' ]
        jdk: [ '8', '11', '16' ]
        registry: [ 'docker.pkg.github.com', 'docker.io' ]
        include:
          - registry: 'docker.pkg.github.com'
            repository: ${{ github.repository }}
            username: ${{ github.actor }}
            token: 'GITHUB_TOKEN'
          - registry: 'docker.io'
            repository: 'DOCKER_HUB_USERNAME'
            username: 'DOCKER_HUB_USERNAME'
            token: 'DOCKER_HUB_TOKEN'
    env:
      VERSION: ${{ needs.check.outputs.latest }}
      IMAGE_URL: "${{ matrix.registry }}/${{ secrets[matrix.repository] || matrix.repository }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          docker build . -t $IMAGE_NAME \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg ALPINE_VERSION=${{ matrix.alpine }} \
            --build-arg SBT_VERSION=$VERSION
      - name: Log into registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
        run: |
          echo "${{ secrets[matrix.token] }}" | \
          docker login ${{ matrix.registry }} \
            -u ${{ secrets[matrix.username] || matrix.username }} \
            --password-stdin
      - name: Push
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo "$IMAGE_URL/$IMAGE_NAME" | tr '[A-Z]' '[a-z]')

          push() {
            local TAG=${1?}

            echo IMAGE_ID=$IMAGE_ID
            echo TAG=$TAG

            docker tag $IMAGE_NAME $IMAGE_ID:$TAG
            docker push $IMAGE_ID:$TAG
          }

          case "${{ matrix.alpine }}" in
            "alpine")
              push "${{ matrix.jdk }}-${VERSION}-full"
              push "${{ matrix.jdk }}-full"
              ;;
            "alpine-slim")
              push "${{ matrix.jdk }}-${VERSION}-slim"
              push "${{ matrix.jdk }}-slim"
              push "${{ matrix.jdk }}"
              ;;
            *)
              echo "Error: Unexpected alpine version: ${{ matrix.alpine }}" >&2
              exit 1
              ;;
          esac

          case "${{ matrix.jdk }},${{ matrix.alpine }}" in
            "8,alpine")
              push "${VERSION}-full"
              push "full"
              ;;
            "8,alpine-slim")
              push "${VERSION}-slim"
              push "slim"
              push "latest"
              ;;
          esac

